{ const typed = (type, value, raw) => ({type, value, ...(raw ? {raw} : {})}) }

CellParser 
  = _ '=' _ value:(GroupExecute/Execute) _ { return typed('execute', value) }
  / _ value:TypedFloat _ !('.'+ / [^0-9]) _ { return value }
  / _ value:TypedInteger _ !('.'+ / [^0-9]) _ { return value }
  / TypedString


TypedFloat = _ float:Float _ { return typed('float', float) }

TypedInteger = _ integer:Integer _ { return typed('integer', integer) }

TypedString = _ string:String _ { return typed('string', string) }

Execute = query:(GroupExecute/Factor/Command/Address) {
  return query
}

GroupExecute = '(' _ execute:Execute _ ')' property:AnyProperty* {
	return {
    type: 'group',
    property,
    execute
  }
}
AnyProperty = DotProperty / ArrayProperty

DotProperty = '.' _ property:(GroupAnyProperty/TypedInteger/Factor/Command/!Address val:[a-zA-Z0-9]+ { return {type: 'string', value: val.join('')} }/Address) _ {
	return {
    ...property,
    dotNotation: true
  }
}

ArrayProperty = '[' _ property:(GroupAnyProperty/TypedInteger/Factor/Command/Address) _ ']' {
	return {
    ...property,
    arrayNotation: true
  }
}


GroupAnyProperty = _ '(' _ property:(Factor/Command/!Address val:[a-zA-Z0-9]+ { return {type: 'string', value: val.join('')} }/Address) _ ')' _ {
	return {
      group: true,
      ...property
    }
}

String = val:(.*) { return val.join('') }

Integer = Exponential / SignInt

SignInt = sign:'-'? numbers:($ [0-9,]+) {
  return parseInt((sign || '') + numbers.replace(/,/g, ''))
}
Exponential = left:(SignFloat/SignInt) 'e' '+'? right:SignInt {
  return parseFloat(left + 'e' + right)
}

word = word:(letter+) {
  return word.join('')
}
letter = [a-zA-Z0-9]

Operation = op:('+'/'-'/'*'/'/'/'^') _ value:Factor {
  return {
    type: 'operation',
    op,
    value
  }
}

Factor = input:Primary _ operations:(Operation)* {
  if (!operations || !operations.length) {
    return input
  }
  return {type: 'compute', input, operations}
}

Primary = GroupExecute
  / TypedFloat
  / TypedInteger
  / Arg

Number = int:('-'? [0-9,]+) { return parseInt(int.join('').replace(',', '')) }
Float = Exponential / SignFloat

SignFloat = sign:'-'? left:($ [0-9,]+) _ '.' _ right:($ [0-9,]+) {
	return parseFloat((sign || '') + left.replace(',', '') + '.' + right)
}
Args = _ arg:(Factor/Arg) _ ','? {
	return arg
}

SuffArg = ',' _ a:(Factor/Arg) { return a }

Command = comm:(word) _ "(" _ args:(Args*) _ ")" property:(AnyProperty)* {
  return {
    type: 'command',
    comm,
    property,
    args
  }
}

Arg = arg:(Range / AnyProperty / Address / Command / TypedValue) { return arg; }

Address = sheet:([a-zA-Z0-9_]+ & '!' { return text() })? '!'? colFix:([$]?) col:([a-zA-Z]+)? '' rowFix:([$]?) row:([0-9]+) property:AnyProperty* {
  col = col && col.join('')
  row = parseInt(row.join(''))
  colFix = !!colFix
  rowFix = !!rowFix
	return {sheet: sheet, type: 'address', row, col, colFix, rowFix, address: col + row, ...(property.length ? {property} : {}) }
}

AddressProperty = '.' _ property:(GroupProperty/TypedInteger/!Address val:[a-zA-Z0-9]+ { return {type: 'string', value: val.join('')} }/Address) _ {
	return property
}

GroupProperty = _ '(' _ property:(TypedInteger/!Address val:[a-zA-Z0-9]+ { return {type: 'string', value: val.join('')} }/Address) _ ')' _ {
	return {
    group: true,
    ...property
  }
}

Range = from:Address ':' to:(Address) _property:AnyProperty* {
	const {property, ..._to} = to
  return {
	property,
    type: 'range',
    from,
    to: _to
  }
}

TypedValue = value:Value { return typed('literal', value, text()) }

Value
  = '"' chars:DoubleStringCharacter* '"' { return chars.join(''); }
  / "'" chars:SingleStringCharacter* "'" { return chars.join(''); }

DoubleStringCharacter
  = !('"' / "\\") char:. { return char; }
  / "\\" sequence:EscapeSequence { return sequence; }

SingleStringCharacter
  = !("'" / "\\") char:. { return char; }
  / "\\" sequence:EscapeSequence { return sequence; }

EscapeSequence
  = "'"
  / '"'
  / "\\"
  / "b"  { return "\\b";   }
  / "f"  { return "\\f";   }
  / "n"  { return "\\n";   }
  / "r"  { return "\\r";   }
  / "t"  { return "\\t";   }
  / "v"  { return "\\x0B"; }
 
space = " "
_ = [ \t\n\r]*
